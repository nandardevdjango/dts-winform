
--TRIGER BUAT TABLE BRAND_AVERAGE_PRICE
IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_Insert_B_AVERAGE')
BEGIN
DROP TRIGGER [dbo].TR_Insert_B_AVERAGE  ;
END
GO
CREATE TRIGGER [dbo].[TR_Insert_B_AVERAGE]
	ON [dbo].[BRND_AVGPRICE]
AFTER INSERT
AS 
SET NOCOUNT ON; 
BEGIN		  
		DECLARE @V_IDApp INT,@V_CreatedBy VARCHAR(100);
 
		SELECT @V_IDApp = INSERTED.IDApp,@V_CreatedBy = inserted.CreatedBy       
		FROM INSERTED;

		IF @V_IDApp IS NULL 
			RETURN;

		IF NOT EXISTS(SELECT IDApp FROM deleted WHERE IDApp = @V_IDApp)--chek kalau ini adalah update triger
		BEGIN
 		INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
		VALUES('INSERT','BRND_AVGPRICE','IDApp',CONVERT(VARCHAR(200),@V_IDApp),'Inserted new Data',GETDATE(),@V_CreatedBy);
	    END
END
GO
 --=================================================================================================================

IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_DELETE_B_AVERAGE')
BEGIN
DROP TRIGGER TR_DELETE_B_AVERAGE  ;
END
GO

create trigger dbo.[TR_DELETE_B_AVERAGE] 
on [dbo].[BRND_AVGPRICE]
AFTER DELETE
AS
SET NOCOUNT ON;
BEGIN
	DECLARE @V_IDApp INT,@V_OAvgPrice DECIMAL(18,2),@V_OAvgPricePL DECIMAL(18,2),@V_DESCRIPTIONS VARCHAR(400),
	@V_DateCreated SMALLDATETIME,@V_CreatedBy VARCHAR(100),@V_ActionBy VARCHAR(100);
	SELECT @V_IDApp = D.IDApp,@V_OAvgPrice = D.AVGPRICE, @V_OAvgPricePL = D.AVGPRICE_PL,@V_DateCreated = D.CreatedDate,@V_CreatedBy = D.CreatedBy,
	@V_ActionBy = CONVERT(VARCHAR(100), CONNECTIONPROPERTY('client_net_address'))
	FROM DELETED D;
	IF @V_IDApp IS NULL
		RETURN;
	SET @V_DESCRIPTIONS = 'Action = Delete, Origin AVGPRICE = ' + CONVERT(VARCHAR(100),@V_OAvgPrice) + ', AVGPRICE_PL ' + CONVERT(VARCHAR(100),@V_OAvgPricePL) 
	+ ' Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy ' + @V_CreatedBy;

	INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
		VALUES('DELETE','BRND_AVGPRICE','IDApp',CONVERT(VARCHAR(200),@V_IDApp),@V_DESCRIPTIONS,GETDATE(),@V_ActionBy);
END
GO
 --=================================================================================================================

--TIDAK ADA UPDATE, HANYA INSERT DAN DELETE

--CREATE_TRIGGER [dbo].[TR_Update_B_AVERAGE] on [dbo].[BRND_AVGPRICE]
--AFTER UPDATE
--AS
--SET NOCOUNT ON;
--BEGIN
--	DECLARE @V_IDApp INT,@V_COLUMNS_NAME VARCHAR(300),@V_ACTIONS VARCHAR(100),@V_ACTION_BY VARCHAR(100),
--			@V_ACTION_DESC VARCHAR(400);
--	--chek jika ini bukan insert
--	SELECT @V_IDApp = INSERTED.IDApp;
--	IF EXISTS(SELECT IDApp FROM DELETED WHERE IDApp = @V_IDApp)
--		BEGIN
--			IF UPDATE(AVGPRICE)
--				BEGIN
--					SET @V_COLUMNS_NAME = 'AVGPRICE';
--					SET @V_ACTIONS = 'Update AVGPrice FM,' + 'FROM ' + CONVERT(VARCHAR(100),D.AVGPRICE) + ' TO' + CONVERT(VARCHAR(100),I.AVGPRICE) ;
--					SET @V_ACTION_BY = INSERTED.CreatedBy;					
--				END
--			IF UPDATE(
--		END
--END
		--SELECT * FROM sys.triggers
		--SELECT OBJECT_NAME(1781685495)

		--============== TRIGGER BUAT PRICE FM ===
		--INSERT DELETE DOANG 

IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_Insert_B_PRICE_FM')
BEGIN
DROP TRIGGER [dbo].TR_Insert_B_PRICE_FM  ;
END
GO

CREATE TRIGGER [dbo].[TR_Insert_B_PRICE_FM]
	ON [dbo].[BRND_PRICE_HISTORY]
AFTER INSERT
AS 
SET NOCOUNT ON; 
BEGIN
DECLARE @V_IDApp INT,@V_CreatedBy VARCHAR(100);
 
		SELECT @V_IDApp = INSERTED.IDApp,@V_CreatedBy = inserted.CREATE_BY       
		FROM INSERTED;

		IF @V_IDApp IS NULL
			RETURN;
		IF NOT EXISTS(SELECT IDApp FROM deleted WHERE IDApp = @V_IDApp)--chek kalau ini adalah update triger
		BEGIN

 		INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
		VALUES('INSERT','BRND_PRICE_HISTORY','IDApp',CONVERT(VARCHAR(200),@V_IDApp),'Inserted new Data',GETDATE(),@V_CreatedBy);
	    END
END
GO
 --=================================================================================================================

IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_DELETE_B_PRICE_FM')
BEGIN
DROP TRIGGER TR_DELETE_B_PRICE_FM  ;
END
GO

create trigger dbo.[TR_DELETE_B_PRICE_FM] 
on [dbo].[BRND_PRICE_HISTORY]
AFTER DELETE
AS
SET NOCOUNT ON;
BEGIN
	DECLARE @V_IDApp INT,@V_OPrice DECIMAL(18,2),@V_BRANDPACK_ID VARCHAR(16),@V_DESCRIPTIONS VARCHAR(400),
	@V_DateCreated SMALLDATETIME,@V_CreatedBy VARCHAR(100),@V_BRANDPACK_NAME VARCHAR(100),@V_ActionBy VARCHAR(100);
	SELECT @V_IDApp = D.IDApp,@V_OPrice = D.PRICE,@V_DateCreated = D.CREATE_DATE,@V_CreatedBy = D.CREATE_BY,@V_BRANDPACK_ID = D.BRANDPACK_ID,
	@V_ActionBy = CONVERT(VARCHAR(100), CONNECTIONPROPERTY('client_net_address'))
	FROM DELETED D;
	IF @V_IDApp IS NULL 
		RETURN;
	SET @V_BRANDPACK_NAME = (SELECT TOP  1 BRANDPACK_NAME FROM BRND_BRANDPACK WHERE BRANDPACK_ID = @V_BRANDPACK_ID);
	SET @V_DESCRIPTIONS = 'Action = Delete, Origin BrandPackName ' + @V_BRANDPACK_NAME + '  PRICE = ' + CONVERT(VARCHAR(100),@V_OPrice)
	+ ' Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy ' + @V_CreatedBy;

	INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
		VALUES('DELETE','BRND_PRICE_HISTORY','IDApp',CONVERT(VARCHAR(200),@V_IDApp),@V_DESCRIPTIONS,GETDATE(),@V_ActionBy);
END
GO
 --=================================================================================================================

----====================== TRIGGER UNTUK PKD ================
--INSERT UPDATE DELETE
IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_Insert_TARGET_PKD')
BEGIN
DROP TRIGGER [dbo].TR_Insert_TARGET_PKD  ;
END
GO
CREATE TRIGGER [dbo].[TR_Insert_TARGET_PKD]
	ON [dbo].[AGREE_BRAND_INCLUDE]
AFTER INSERT
AS 
SET NOCOUNT ON; 
BEGIN
DECLARE @V_AgreeBrandID VARCHAR(32) ,@V_CreatedBy VARCHAR(100);
 
		SELECT @V_AgreeBrandID = INSERTED.AGREE_BRAND_ID,@V_CreatedBy = inserted.CREATE_BY
		FROM INSERTED;
		IF @V_AgreeBrandID IS NULL
			RETURN;
		IF NOT EXISTS(SELECT AGREE_BRAND_ID FROM deleted WHERE AGREE_BRAND_ID = @V_AgreeBrandID)--chek kalau ini adalah update triger
		BEGIN
 		INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
		VALUES('INSERT','AGREE_BRAND_INCLUDE','AGREE_BRAND_ID',@V_AgreeBrandID,'Inserted new Data',GETDATE(),@V_CreatedBy);
	    END
END
GO
 --=================================================================================================================

IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_DELETE_TARGET_PKD')
BEGIN
DROP TRIGGER TR_DELETE_TARGET_PKD  ;
END
GO

create trigger dbo.[TR_DELETE_TARGET_PKD] 
on [dbo].[AGREE_BRAND_INCLUDE]
AFTER DELETE
AS
SET NOCOUNT ON;
BEGIN

	--variable
	DECLARE @V_FLAG CHAR(1),@V_AGREE_BRAND_ID VARCHAR(32) ,@V_AGREEMENT_NO VARCHAR(25),@V_DESCRIPTIONS VARCHAR(400),
	@V_DateCreated SMALLDATETIME,@V_CreatedBy VARCHAR(100),@V_BRAND_NAME VARCHAR(100),@V_BRAND_ID VARCHAR(10),
	@V_TARGET_Q1 DECIMAL(18,3),@V_TARGET_Q2 DECIMAL(18,3),@V_TARGET_Q3 DECIMAL(18,3),@V_TARGET_Q4 DECIMAL(18,3),
	@V_TARGET_Q1_FM DECIMAL(18,3),@V_TARGET_Q2_FM DECIMAL(18,3),@V_TARGET_Q3_FM DECIMAL(18,3),@V_TARGET_Q4_FM DECIMAL(18,3),
	@V_TARGET_S1 DECIMAL(18,3),@V_TARGET_S2 DECIMAL(18,3),
	@V_TARGET_S1_FM DECIMAL(18,3),@V_TARGET_S2_FM DECIMAL(18,3),
	@V_TARGET_Q1_PL DECIMAL(18,3),@V_TARGET_Q2_PL DECIMAL(18,3),@V_TARGET_Q3_PL DECIMAL(18,3),@V_TARGET_Q4_PL DECIMAL(18,3),
	@V_TARGET_S1_PL DECIMAL(18,3),@V_TARGET_S2_PL DECIMAL(18,3),@V_ActionBy VARCHAR(100);

	--FILL VARIABLE
	SELECT @V_TARGET_Q1 = TARGET_Q1,@V_TARGET_Q2 = TARGET_Q2,@V_TARGET_Q3 = TARGET_Q3,@V_TARGET_Q4 = TARGET_Q4,
	@V_TARGET_S1 = TARGET_S1,@V_TARGET_S2 = TARGET_S2,
	@V_TARGET_Q1_FM = TARGET_Q1_FM,@V_TARGET_Q2_FM = TARGET_Q2_FM,@V_TARGET_Q3_FM = TARGET_Q3_FM,
    @V_TARGET_Q4_FM = TARGET_Q4_FM,	@V_TARGET_S1_FM = TARGET_S1_FM,@V_TARGET_S2_FM = TARGET_S2_FM,
	@V_TARGET_Q1_PL = TARGET_Q1_PL,@V_TARGET_Q2_PL = TARGET_Q2_PL,@V_TARGET_Q3_PL = TARGET_Q3_PL,
	@V_TARGET_Q4_PL = TARGET_Q4_PL,	@V_TARGET_S1_PL = TARGET_S1_PL,@V_TARGET_S2_PL = TARGET_S2_PL,
	@V_AGREEMENT_NO = AGREEMENT_NO,@V_CreatedBy = CREATE_BY,@V_DateCreated = CREATE_DATE,@V_BRAND_ID = BRAND_ID,@V_AGREE_BRAND_ID = AGREE_BRAND_ID,
	@V_ActionBy = CONVERT(VARCHAR(100), CONNECTIONPROPERTY('client_net_address'))
	FROM deleted
	IF @V_AGREE_BRAND_ID IS NULL
		RETURN;

	SET @V_BRAND_NAME = (SELECT TOP 1 BRAND_NAME FROM BRND_BRAND WHERE BRAND_ID = @V_BRAND_ID);	
	IF NOT EXISTS(SELECT AGREE_BRAND_ID FROM inserted WHERE AGREE_BRAND_ID = @V_AGREE_BRAND_ID)
	BEGIN
		SET @V_FLAG = (SELECT TOP 1 QS_TREATMENT_FLAG FROM AGREE_AGREEMENT WHERE AGREEMENT_NO = @V_AGREEMENT_NO);
		IF(@V_FLAG = 'Q')
			SET @V_DESCRIPTIONS = 'Action = Delete, Origin  BRAND_NAME ' + @V_BRAND_NAME + ',' + 
									' AGREMENT_NO  ' + @V_AGREEMENT_NO + ',' +
									' TARGET_Q1 ' + CONVERT(VARCHAR(100),@V_TARGET_Q1) + ' ,' +
									' TARGET_Q2 ' + CONVERT(VARCHAR(100),@V_TARGET_Q2) + ' ,' +
									' TARGET_Q3 ' + CONVERT(VARCHAR(100),@V_TARGET_Q3) + ' ,' +
									' TARGET_Q4 ' + CONVERT(VARCHAR(100),@V_TARGET_Q4) + ' ,' +
									' TARGET_Q1_FM ' + CONVERT(VARCHAR(100),@V_TARGET_Q1_FM) + ' ,' +
									' TARGET_Q2_FM ' + CONVERT(VARCHAR(100),@V_TARGET_Q2_FM) + ' ,' +
									' TARGET_Q3_FM ' + CONVERT(VARCHAR(100),@V_TARGET_Q3_FM) + ' ,' +
									' TARGET_Q4_FM ' + CONVERT(VARCHAR(100),@V_TARGET_Q4_FM) + ' ,' +
									' TARGET_Q1_PL ' + CONVERT(VARCHAR(100),@V_TARGET_Q1_PL) + ' ,' +
									' TARGET_Q2_PL ' + CONVERT(VARCHAR(100),@V_TARGET_Q2_PL) + ' ,' +
									' TARGET_Q3_PL ' + CONVERT(VARCHAR(100),@V_TARGET_Q3_PL) + ' ,' +
									' TARGET_Q4_PL ' + CONVERT(VARCHAR(100),@V_TARGET_Q4_PL) + ' ,' +
									' Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy  ' + @V_CreatedBy;										
		ELSE
			SET @V_DESCRIPTIONS = 'Action = Delete, Origin  BRAND_NAME ' + @V_BRAND_NAME + ',' + 
									' AGREMENT_NO  ' + @V_AGREEMENT_NO + ',' +
									' TARGET_S1 ' + CONVERT(VARCHAR(100),@V_TARGET_S1) + ' ,' +
									' TARGET_S2 ' + CONVERT(VARCHAR(100),@V_TARGET_S2) + ' ,' +
									' TARGET_S1_FM ' + CONVERT(VARCHAR(100),@V_TARGET_S1_FM) + ' ,' +
									' TARGET_S2_FM ' + CONVERT(VARCHAR(100),@V_TARGET_S2_FM) + ' ,' +
									' TARGET_S1_PL ' + CONVERT(VARCHAR(100),@V_TARGET_S1_PL) + ' ,' +
									' TARGET_S2_PL ' + CONVERT(VARCHAR(100),@V_TARGET_S2_PL) + ' ,' +
									' Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy  ' + @V_CreatedBy;										
	INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
	VALUES('DELETE','AGREE_BRAND_INCLUDE','AGREE_BRAND_ID',@V_AGREE_BRAND_ID, @V_DESCRIPTIONS,GETDATE(),@V_ActionBy);
	END 	
END
GO
 --=================================================================================================================

-----------------TRIGGER UPDATE TARGET PKD=============================
IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_UPDATE_TARGET_PKD')
BEGIN
DROP TRIGGER TR_UPDATE_TARGET_PKD  ;
END
GO

create trigger dbo.[TR_UPDATE_TARGET_PKD] 
on [dbo].[AGREE_BRAND_INCLUDE]
AFTER UPDATE
AS
SET NOCOUNT ON;
BEGIN
--VARIABLE (FROM DELETED)
	DECLARE @V_FLAG CHAR(1),@V_AGREE_BRAND_ID VARCHAR(32) ,@V_AGREEMENT_NO VARCHAR(25),@V_DESCRIPTIONS VARCHAR(400),
	@V_DateCreated SMALLDATETIME,@V_CreatedBy VARCHAR(100),@V_BRAND_NAME VARCHAR(100),@V_BRAND_ID VARCHAR(10),
	@V_TARGET_Q1 DECIMAL(18,3),@V_TARGET_Q2 DECIMAL(18,3),@V_TARGET_Q3 DECIMAL(18,3),@V_TARGET_Q4 DECIMAL(18,3),
	@V_TARGET_Q1_FM DECIMAL(18,3),@V_TARGET_Q2_FM DECIMAL(18,3),@V_TARGET_Q3_FM DECIMAL(18,3),@V_TARGET_Q4_FM DECIMAL(18,3),
	@V_TARGET_S1 DECIMAL(18,3),@V_TARGET_S2 DECIMAL(18,3),
	@V_TARGET_S1_FM DECIMAL(18,3),@V_TARGET_S2_FM DECIMAL(18,3),
	@V_TARGET_Q1_PL DECIMAL(18,3),@V_TARGET_Q2_PL DECIMAL(18,3),@V_TARGET_Q3_PL DECIMAL(18,3),@V_TARGET_Q4_PL DECIMAL(18,3),
	@V_TARGET_S1_PL DECIMAL(18,3),@V_TARGET_S2_PL DECIMAL(18,3),@V_ActionBy VARCHAR(100),
	@V_ApprovedBy VARCHAR(100),@V_ApprovedDate SMALLDATETIME,
	--VARIABLE FROM INSERTED
	@I_TARGET_Q1 DECIMAL(18,3),@I_TARGET_Q2  DECIMAL(18,3),@I_TARGET_Q3 DECIMAL(18,3), @I_TARGET_Q4  DECIMAL(18,3),
	@I_TARGET_Q1_FM  DECIMAL(18,3),@I_TARGET_Q2_FM  DECIMAL(18,3),@I_TARGET_Q3_FM  DECIMAL(18,3),@I_TARGET_Q4_FM DECIMAL(18,3) ,
	@I_TARGET_S1  DECIMAL(18,3) ,@I_TARGET_S2  DECIMAL(18,3),@I_TARGET_S1_FM  DECIMAL(18,3),@I_TARGET_S2_FM  DECIMAL(18,3),
	@I_TARGET_Q1_PL DECIMAL(18,3) ,@I_TARGET_Q2_PL  DECIMAL(18,3) ,@I_TARGET_Q3_PL DECIMAL(18,3) ,@I_TARGET_Q4_PL  DECIMAL(18,3),
	@I_TARGET_S1_PL DECIMAL(18,3),@I_TARGET_S2_PL  DECIMAL(18,3),
	@I_ApprovedBy VARCHAR(100),@I_ApprovedDate SMALLDATETIME;
	--FILL VARIABLE DELETED
	SELECT @V_TARGET_Q1 = TARGET_Q1,@V_TARGET_Q2 = TARGET_Q2,@V_TARGET_Q3 = TARGET_Q3,@V_TARGET_Q4 = TARGET_Q4,
	@V_TARGET_S1 = TARGET_S1,@V_TARGET_S2 = TARGET_S2,
	@V_TARGET_Q1_FM = TARGET_Q1_FM,@V_TARGET_Q2_FM = TARGET_Q2_FM,@V_TARGET_Q3_FM = TARGET_Q3_FM,
    @V_TARGET_Q4_FM = TARGET_Q4_FM,	@V_TARGET_S1_FM = TARGET_S1_FM,@V_TARGET_S2_FM = TARGET_S2_FM,
	@V_TARGET_Q1_PL = TARGET_Q1_PL,@V_TARGET_Q2_PL = TARGET_Q2_PL,@V_TARGET_Q3_PL = TARGET_Q3_PL,
	@V_TARGET_Q4_PL = TARGET_Q4_PL,	@V_TARGET_S1_PL = TARGET_S1_PL,@V_TARGET_S2_PL = TARGET_S2_PL,
	@V_AGREEMENT_NO = AGREEMENT_NO,@V_CreatedBy = CREATE_BY,@V_DateCreated = CREATE_DATE,@V_BRAND_ID = BRAND_ID,@V_AGREE_BRAND_ID = AGREE_BRAND_ID,
	@V_ApprovedBy = ApprovedBy,@V_ApprovedDate = ApprovedDate,
	@V_ActionBy = CONVERT(VARCHAR(100), CONNECTIONPROPERTY('client_net_address'))
	FROM deleted ;

	--FILL VARIBEL INSERTED
	SELECT @I_TARGET_Q1 = TARGET_Q1,@I_TARGET_Q2 = TARGET_Q2,@I_TARGET_Q3 = TARGET_Q3,@I_TARGET_Q4 = TARGET_Q4,
	@I_TARGET_S1 = TARGET_S1,@I_TARGET_S2 = TARGET_S2,
	@I_TARGET_Q1_FM = TARGET_Q1_FM,@I_TARGET_Q2_FM = TARGET_Q2_FM,@I_TARGET_Q3_FM = TARGET_Q3_FM,
    @I_TARGET_Q4_FM = TARGET_Q4_FM,	@I_TARGET_S1_FM = TARGET_S1_FM,@I_TARGET_S2_FM = TARGET_S2_FM,
	@I_TARGET_Q1_PL = TARGET_Q1_PL,@I_TARGET_Q2_PL = TARGET_Q2_PL,@I_TARGET_Q3_PL = TARGET_Q3_PL,
	@I_TARGET_Q4_PL = TARGET_Q4_PL,	@I_TARGET_S1_PL = TARGET_S1_PL,@I_TARGET_S2_PL = TARGET_S2_PL, 
	@I_ApprovedBy = ApprovedBy,@I_ApprovedDate = ApprovedDate
	FROM INSERTED;

	--INIATILISASI
	IF @I_ApprovedBy IS NULL 
		SET @I_ApprovedBy = ''
	IF @V_ApprovedBy IS NULL
		SET @V_ApprovedBy =  ''
	IF @I_ApprovedDate IS NULL
		SET @I_ApprovedDate = CONVERT(VARCHAR(100),(GETDATE() -1),101)
	IF @V_ApprovedDate IS NULL
		SET @V_ApprovedDate = CONVERT(VARCHAR(100),(GETDATE()-1),101)

	SET @V_BRAND_NAME = (SELECT TOP 1 BRAND_NAME FROM BRND_BRAND WHERE BRAND_ID = @V_BRAND_ID);
	IF @V_AGREE_BRAND_ID IS NULL 
		RETURN;

	IF EXISTS(SELECT AGREE_BRAND_ID FROM inserted WHERE AGREE_BRAND_ID = @V_AGREE_BRAND_ID)
	BEGIN
		SET @V_FLAG = (SELECT TOP 1 QS_TREATMENT_FLAG FROM AGREE_AGREEMENT WHERE AGREEMENT_NO = @V_AGREEMENT_NO);
		SET @V_DESCRIPTIONS = 'Action = Update, Origin  BRAND_NAME ' + @V_BRAND_NAME + ',' + 
										' AGREMENT_NO  ' + @V_AGREEMENT_NO + ', {';
			IF(@V_FLAG = 'Q')
			BEGIN
				IF (@I_TARGET_Q1 <> @V_TARGET_Q1)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_Q1 ' + CONVERT(VARCHAR(100),@V_TARGET_Q1) + ' ,'
				IF (@I_TARGET_Q2 <> @V_TARGET_Q2)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_Q2 ' + CONVERT(VARCHAR(100),@V_TARGET_Q2) + ' ,'
				IF (@I_TARGET_Q3 <> @V_TARGET_Q3)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_Q3 ' + CONVERT(VARCHAR(100),@V_TARGET_Q3) + ' ,'
				IF (@I_TARGET_Q4 <> @V_TARGET_Q4)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_Q4 ' + CONVERT(VARCHAR(100),@V_TARGET_Q4) + ' ,'			
				IF (@I_TARGET_Q1_FM <> @V_TARGET_Q1_FM)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_Q1_FM ' + CONVERT(VARCHAR(100),@V_TARGET_Q1_FM) + ' ,'
				IF (@I_TARGET_Q2_FM <> @V_TARGET_Q2_FM)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_Q2_FM ' + CONVERT(VARCHAR(100),@V_TARGET_Q2_FM) + ' ,'
				IF (@I_TARGET_Q3_FM <> @V_TARGET_Q3_FM)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_Q3_FM ' + CONVERT(VARCHAR(100),@V_TARGET_Q3_FM) + ' ,'
				IF (@I_TARGET_Q4_FM <> @V_TARGET_Q4_FM)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_Q4_FM ' + CONVERT(VARCHAR(100),@V_TARGET_Q4_FM) + ' ,'
				IF (@I_TARGET_Q1_PL <>  @V_TARGET_Q1_PL)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_Q1_PL ' + CONVERT(VARCHAR(100),@V_TARGET_Q1_PL) + ' ,'
				IF (@I_TARGET_Q2_PL <> @V_TARGET_Q2_PL)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_Q2_PL ' + CONVERT(VARCHAR(100),@V_TARGET_Q2_PL) + ' ,'
				IF (@I_TARGET_Q3_PL <> @V_TARGET_Q3_PL)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_Q3_PL ' + CONVERT(VARCHAR(100),@V_TARGET_Q3_PL) + ' ,'
				IF (@I_TARGET_Q4_PL <> @V_TARGET_Q4_PL)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_Q4_PL ' + CONVERT(VARCHAR(100),@V_TARGET_Q4_PL) + ' ,'
			END
			ELSE
			BEGIN
				IF (@I_TARGET_S1 <> @V_TARGET_S1)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_S1 ' + CONVERT(VARCHAR(100),@V_TARGET_S1) + ' ,'
				IF (@I_TARGET_S2 <> @V_TARGET_S2)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_S2 ' + CONVERT(VARCHAR(100),@V_TARGET_S2) + ' ,'
				IF (@I_TARGET_S1_FM <> @V_TARGET_S1_FM)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_S1_FM ' + CONVERT(VARCHAR(100),@V_TARGET_S1_FM) + ' ,'
				IF (@I_TARGET_S2_FM <> @V_TARGET_S2_FM)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_S2_FM ' + CONVERT(VARCHAR(100),@V_TARGET_S2_FM) + ' ,'
				IF (@I_TARGET_S1_PL <> @V_TARGET_S1_PL)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_S1_PL ' + CONVERT(VARCHAR(100),@V_TARGET_S1_PL) + ' ,'
				IF (@I_TARGET_S2_PL <> @V_TARGET_S2_PL)
					SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_S2_PL ' + CONVERT(VARCHAR(100),@V_TARGET_S2_PL) + ' ,'				
			END
			IF (@I_ApprovedBy <> @V_ApprovedBy)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' Approved By ' + ISNULL(@V_ApprovedBy,'')
			IF (@I_ApprovedDate <> @V_ApprovedDate)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + '} Approved Date ' + CONVERT(VARCHAR(100),@V_ApprovedDate,101) + ', '
			SET @V_DESCRIPTIONS = @V_DESCRIPTIONS + + ' Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy ' + @V_CreatedBy;
	INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
	VALUES('UPDATE','AGREE_BRAND_INCLUDE','AGREE_BRAND_ID',@V_AGREE_BRAND_ID, @V_DESCRIPTIONS,GETDATE(),@V_ActionBy);
	END
END
GO
--DELETE FROM TR_AUDIT_LOG WHERE TABLE_NAME = 'AGREE_BRAND_INCLUDE'
-------------====== TRIGGER UNTUK PROGRESSIVE DISCOUNT BY VOLUME===========================================
-- FOR UPDATE , DELETE, INSERT
 --=================================================================================================================


IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_INSERT_PROG_DISC_VOL')
BEGIN
DROP TRIGGER TR_INSERT_PROG_DISC_VOL  ;
END
GO
CREATE TRIGGER [dbo].[TR_INSERT_PROG_DISC_VOL]
	ON [dbo].[AGREE_PROG_DISC]
AFTER INSERT
AS 
SET NOCOUNT ON; 
BEGIN
DECLARE @V_AgreeBrandID VARCHAR(32) ,@V_CreatedBy VARCHAR(100),@V_UNIQUE_ID VARCHAR(200);
SELECT @V_UNIQUE_ID = CONVERT(VARCHAR(200),UNIQUE_ID),@V_AgreeBrandID = AGREE_BRAND_ID,@V_CreatedBy = CREATE_BY FROM inserted;
IF @V_AgreeBrandID IS NULL
	RETURN;

IF NOT EXISTS(SELECT AGREE_BRAND_ID FROM deleted WHERE AGREE_BRAND_ID = @V_AgreeBrandID)--chek kalau ini adalah update triger
	BEGIN	
	INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
	VALUES('INSERT','AGREE_PROG_DISC','UNIQUE_ID',@V_UNIQUE_ID,'Inserted new Data',GETDATE(),@V_CreatedBy);
	END
END
GO
 --=================================================================================================================

IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_UPDATE_PROG_DISC_VOL')
BEGIN
DROP TRIGGER TR_UPDATE_PROG_DISC_VOL  ;
END
GO

create trigger dbo.[TR_UPDATE_PROG_DISC_VOL] 
on [dbo].[AGREE_PROG_DISC]
AFTER UPDATE
AS
SET NOCOUNT ON;
BEGIN
	
	---VARIABLE FROM DELETED
	DECLARE @V_AGREE_BRAND_ID VARCHAR(32) ,@V_AGREEMENT_NO VARCHAR(25),@V_DESCRIPTIONS VARCHAR(400),
	@V_DateCreated SMALLDATETIME,@V_CreatedBy VARCHAR(100),@V_BRAND_NAME VARCHAR(100),@V_UNIQUE_ID VARCHAR(200),
	@V_QSY_DISC_FLAG VARCHAR(2),@V_UP_TO_PCT DECIMAL(18,4),@V_PRGSV_DISC_PCT DECIMAL(18,4),@V_ActionBy VARCHAR(100),

	--VARIABLE FROM INSERTED
	@I_QSY_DISC_FLAG VARCHAR(2),@I_UP_TO_PCT DECIMAL(18,4),@I_PRGSV_DISC_PCT DECIMAL(18,4);

	SELECT @V_UNIQUE_ID = CONVERT(VARCHAR(200),UNIQUE_ID), @V_AGREE_BRAND_ID = AGREE_BRAND_ID,@V_QSY_DISC_FLAG = QSY_DISC_FLAG,@V_UP_TO_PCT = UP_TO_PCT,
	@V_PRGSV_DISC_PCT = PRGSV_DISC_PCT,@V_DateCreated = CREATE_DATE, @V_CreatedBy = CREATE_BY FROM  DELETED;

	SELECT @V_UNIQUE_ID = CONVERT(VARCHAR(200),UNIQUE_ID),@I_QSY_DISC_FLAG = QSY_DISC_FLAG,@I_UP_TO_PCT = UP_TO_PCT,
	@I_PRGSV_DISC_PCT = PRGSV_DISC_PCT FROM  INSERTED;

	SET @V_AGREEMENT_NO = (SELECT TOP 1 AGREEMENT_NO FROM AGREE_BRAND_INCLUDE WHERE AGREE_BRAND_ID = @V_AGREE_BRAND_ID);
	SET @V_BRAND_NAME = (SELECT TOP 1 BR.BRAND_NAME FROM BRND_BRAND BR INNER JOIN AGREE_BRAND_INCLUDE ABI 
						ON ABI.BRAND_ID = BR.BRAND_ID WHERE ABI.AGREE_BRAND_ID = @V_AGREE_BRAND_ID);
	SET @V_ActionBy = CONVERT(VARCHAR(100), CONNECTIONPROPERTY('client_net_address'))
	SET @V_DESCRIPTIONS = 'Action = Update, Origin  BRAND_NAME ' + @V_BRAND_NAME + ',' + 
										' AGREMENT_NO  ' + @V_AGREEMENT_NO + ', {';
	IF @V_AGREE_BRAND_ID IS NULL
		RETURN;
	IF EXISTS(SELECT AGREE_BRAND_ID FROM INSERTED WHERE UNIQUE_ID = @V_UNIQUE_ID)
		BEGIN
			IF (@I_UP_TO_PCT <> @V_UP_TO_PCT)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' MORE THAN [%] ' + CONVERT(VARCHAR(100),@V_UP_TO_PCT) + ' ,'
			IF (@I_PRGSV_DISC_PCT <> @V_PRGSV_DISC_PCT)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' PROGRESSIVE DISC [%] ' + CONVERT(VARCHAR(100),@V_PRGSV_DISC_PCT) + ' ,'
			IF (@I_QSY_DISC_FLAG <> @V_QSY_DISC_FLAG)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' AND FLAG ' + CONVERT(VARCHAR(100),@V_QSY_DISC_FLAG)

			SET @V_DESCRIPTIONS = @V_DESCRIPTIONS +  '}, Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy ' + @V_CreatedBy;
			INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
			VALUES('UPDATE','AGREE_PROG_DISC','UNIQUE_ID',@V_UNIQUE_ID,@V_DESCRIPTIONS,GETDATE(),@V_ActionBy);
		END
END
GO
 --=================================================================================================================

IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_DELETE_PROG_DISC_VOL')
BEGIN
DROP TRIGGER TR_DELETE_PROG_DISC_VOL ;
END
GO

create trigger dbo.[TR_DELETE_PROG_DISC_VOL] 
on [dbo].[AGREE_PROG_DISC]
AFTER DELETE
AS
SET NOCOUNT ON;
BEGIN
DECLARE @V_AGREE_BRAND_ID VARCHAR(32) ,@V_AGREEMENT_NO VARCHAR(25),@V_DESCRIPTIONS VARCHAR(400),
	@V_DateCreated SMALLDATETIME,@V_CreatedBy VARCHAR(100),@V_BRAND_NAME VARCHAR(100),@V_UNIQUE_ID VARCHAR(200),
	@V_QSY_DISC_FLAG VARCHAR(2),@V_UP_TO_PCT DECIMAL(18,4),@V_PRGSV_DISC_PCT DECIMAL(18,4),@V_ActionBy VARCHAR(100);
	SELECT @V_UNIQUE_ID = CONVERT(VARCHAR(200),UNIQUE_ID), @V_AGREE_BRAND_ID = AGREE_BRAND_ID,@V_QSY_DISC_FLAG = QSY_DISC_FLAG,@V_UP_TO_PCT = UP_TO_PCT,
	@V_PRGSV_DISC_PCT = PRGSV_DISC_PCT,@V_DateCreated = CREATE_DATE, @V_CreatedBy = CREATE_BY FROM  DELETED;
	SET @V_ActionBy = CONVERT(VARCHAR(100), CONNECTIONPROPERTY('client_net_address'))
	IF @V_AGREE_BRAND_ID IS NULL
		RETURN ;

	IF NOT EXISTS(SELECT AGREE_BRAND_ID FROM INSERTED WHERE UNIQUE_ID = @V_UNIQUE_ID)
	BEGIN
	SET @V_DESCRIPTIONS = 'Action = Delete, ORIGIN VALUE More than [%] ' + CONVERT(VARCHAR(100), ISNULL(@V_UP_TO_PCT,0)) + ',' +
							' PROGRESSIVE DISC ' + CONVERT(VARCHAR(100),@V_PRGSV_DISC_PCT) + ',' + 
							' FLAG ' + @V_QSY_DISC_FLAG + ',' +
						    ' Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy  ' + @V_CreatedBy;										
		INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
		VALUES('DELETE','AGREE_PROG_DISC','UNIQUE_ID',@V_UNIQUE_ID, @V_DESCRIPTIONS,GETDATE(),@V_ActionBy);
	END
END
GO
 --=================================================================================================================

--================ TRIGGER FOR PROGRESSIVE DISCOUNT BY VALUE ===============================
-------------====== TRIGGER UNTUK PROGRESSIVE DISCOUNT BY VOLUME===========================================
-- FOR UPDATE , DELETE, INSERT
IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_INSERT_PROG_DISC_VAL')
BEGIN
DROP TRIGGER TR_INSERT_PROG_DISC_VAL  ;
END
GO
CREATE TRIGGER [dbo].[TR_INSERT_PROG_DISC_VAL]
	ON [dbo].[AGREE_PROG_DISC_VAL]
AFTER INSERT
AS 
SET NOCOUNT ON; 
BEGIN
DECLARE @V_IDApp INT,@V_AgreeBrandID VARCHAR(32) ,@V_CreatedBy VARCHAR(100);
SELECT @V_IDApp = IDApp,@V_AgreeBrandID = AGREE_BRAND_ID,@V_CreatedBy = CREATE_BY FROM inserted;
IF @V_IDApp IS NULL
	RETURN;

IF NOT EXISTS(SELECT AGREE_BRAND_ID FROM deleted WHERE AGREE_BRAND_ID = @V_AgreeBrandID)--chek kalau ini adalah update triger
	BEGIN	
	INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
	VALUES('INSERT','AGREE_PROG_DISC_VAL','IDApp',CONVERT(VARCHAR(200),@V_IDApp),'Inserted new Data',GETDATE(),@V_CreatedBy);
	END
END
GO
 --=================================================================================================================

IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_UPDATE_PROG_DISC_VAL')
BEGIN
DROP TRIGGER TR_UPDATE_PROG_DISC_VAL  ;
END
GO

create trigger dbo.[TR_UPDATE_PROG_DISC_VAL] 
on [dbo].[AGREE_PROG_DISC_VAL]
AFTER UPDATE
AS
SET NOCOUNT ON;
BEGIN
	--VARIABLE DELETE
	DECLARE @V_IDApp INT,@V_AGREE_BRAND_ID VARCHAR(32) ,@V_AGREEMENT_NO VARCHAR(25),@V_DESCRIPTIONS VARCHAR(400),
	@V_DateCreated SMALLDATETIME,@V_CreatedBy VARCHAR(100),@V_BRAND_NAME VARCHAR(100),
	@V_QSY_DISC_FLAG VARCHAR(2),@V_PRGSV_DISC_PCT DECIMAL(18,4),@V_ActionBy VARCHAR(100),
	@I_QSY_DISC_FLAG VARCHAR(2),@I_PRGSV_DISC_PCT DECIMAL(18,4);

	SELECT @V_IDApp = IDApp, @V_AGREE_BRAND_ID = AGREE_BRAND_ID,@V_QSY_DISC_FLAG = QSY_DISC_FLAG,
	@V_PRGSV_DISC_PCT = PRGSV_DISC_PCT,@V_DateCreated = CREATE_DATE, @V_CreatedBy = CREATE_BY FROM  DELETED;

	SELECT @I_QSY_DISC_FLAG =  QSY_DISC_FLAG, @I_PRGSV_DISC_PCT = PRGSV_DISC_PCT FROM INSERTED;

	SET @V_AGREEMENT_NO = (SELECT TOP 1 AGREEMENT_NO FROM AGREE_BRAND_INCLUDE WHERE AGREE_BRAND_ID = @V_AGREE_BRAND_ID);
	SET @V_BRAND_NAME = (SELECT TOP 1 BR.BRAND_NAME FROM BRND_BRAND BR INNER JOIN AGREE_BRAND_INCLUDE ABI 
						ON ABI.BRAND_ID = BR.BRAND_ID WHERE ABI.AGREE_BRAND_ID = @V_AGREE_BRAND_ID);
	SET @V_ActionBy = CONVERT(VARCHAR(100), CONNECTIONPROPERTY('client_net_address'))
	SET @V_DESCRIPTIONS = 'Action = Update, Origin  BRAND_NAME ' + @V_BRAND_NAME + ',' + 
										' AGREMENT_NO  ' + @V_AGREEMENT_NO + ', {';
	IF @V_IDApp IS NULL 
		RETURN;

	IF EXISTS(SELECT AGREE_BRAND_ID FROM INSERTED WHERE IDApp = @V_IDApp)
		BEGIN
			IF (@I_PRGSV_DISC_PCT <> @V_PRGSV_DISC_PCT)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' PROGRESSIVE DISC [%] ' + CONVERT(VARCHAR(100),@V_PRGSV_DISC_PCT) + ' ,'
			IF (@I_QSY_DISC_FLAG <> @V_QSY_DISC_FLAG)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' AND FLAG ' + CONVERT(VARCHAR(100),@V_QSY_DISC_FLAG)

			SET @V_DESCRIPTIONS = @V_DESCRIPTIONS + + '}, Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy ' + @V_CreatedBy;
			INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
			VALUES('UPDATE','AGREE_PROG_DISC_VAL','IDApp',CONVERT(VARCHAR(200),@V_IDApp),@V_DESCRIPTIONS,GETDATE(),@V_ActionBy);
		END
END
GO
 --=================================================================================================================

IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_DELETE_PROG_DISC_VAL')
BEGIN
DROP TRIGGER TR_DELETE_PROG_DISC_VAL  ;
END
GO

create trigger dbo.[TR_DELETE_PROG_DISC_VAL] 
on [dbo].[AGREE_PROG_DISC_VAL]
AFTER DELETE
AS
SET NOCOUNT ON;
BEGIN
	DECLARE @V_IDApp INT, @V_AGREE_BRAND_ID VARCHAR(32) ,@V_AGREEMENT_NO VARCHAR(25),@V_DESCRIPTIONS VARCHAR(400),
	@V_DateCreated SMALLDATETIME,@V_CreatedBy VARCHAR(100),@V_BRAND_NAME VARCHAR(100),
	@V_QSY_DISC_FLAG VARCHAR(2),@V_UP_TO_PCT DECIMAL(18,4),@V_PRGSV_DISC_PCT DECIMAL(18,4),@V_ActionBy VARCHAR(100);
	SELECT @V_IDApp = IDApp, @V_AGREE_BRAND_ID = AGREE_BRAND_ID,@V_QSY_DISC_FLAG = QSY_DISC_FLAG,
	@V_PRGSV_DISC_PCT = PRGSV_DISC_PCT,@V_DateCreated = CREATE_DATE, @V_CreatedBy = CREATE_BY FROM  DELETED;
	SET @V_ActionBy = CONVERT(VARCHAR(100), CONNECTIONPROPERTY('client_net_address'))
	IF @V_IDApp IS NULL 
	RETURN ;

	IF @V_IDApp IS NULL 
		RETURN;
	IF NOT EXISTS(SELECT AGREE_BRAND_ID FROM INSERTED WHERE IDApp = @V_IDApp)
	BEGIN
	SET @V_DESCRIPTIONS = 'Action = Delete, ORIGIN VALUE PROGRESSIVE DISC ' + CONVERT(VARCHAR(100),@V_PRGSV_DISC_PCT) + ',' + 
						  '  FLAG ' + @V_QSY_DISC_FLAG + ',' +
						  ' Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy  ' + @V_CreatedBy;										
		INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
		VALUES('DELETE','AGREE_PROG_DISC_VAL','IDApp',CONVERT(VARCHAR(200),@V_IDApp),@V_DESCRIPTIONS,GETDATE(),@V_ActionBy);
	END
END
GO
 --=================================================================================================================

--================ TRIGGER FOR PROGRESSIVE GIVEN PROGRESSIVE PREVIOUS PERIODE ===============================
-- FOR UPDATE , DELETE, INSERT


IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_INSERT_GIVEN_PROGRESSIVE')
BEGIN
DROP TRIGGER TR_INSERT_GIVEN_PROGRESSIVE  ;
END
GO
CREATE TRIGGER [dbo].[TR_INSERT_GIVEN_PROGRESSIVE]
	ON [dbo].[GIVEN_PROGRESSIVE]
AFTER INSERT
AS 
SET NOCOUNT ON; 
BEGIN
DECLARE @V_IDApp INT,@V_AgreeBrandID VARCHAR(32) ,@V_CreatedBy VARCHAR(100);
SELECT @V_IDApp = IDApp, @V_AgreeBrandID = AGREE_BRAND_ID,@V_CreatedBy = CREATE_BY FROM inserted;
IF @V_IDApp IS NULL
	RETURN;

IF NOT EXISTS(SELECT AGREE_BRAND_ID FROM deleted WHERE AGREE_BRAND_ID = @V_AgreeBrandID)--chek kalau ini adalah update triger
	BEGIN	
	INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
	VALUES('INSERT','GIVEN_PROGRESSIVE','IDApp',CONVERT(VARCHAR(200),@V_IDApp),'Inserted new Data',GETDATE(),@V_CreatedBy);
	END
END
GO
 --=================================================================================================================

IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_UPDATE_GIVEN_PROGRESSIVE')
BEGIN
DROP TRIGGER TR_UPDATE_GIVEN_PROGRESSIVE  ;
END
GO

create trigger dbo.[TR_UPDATE_GIVEN_PROGRESSIVE] 
on [dbo].[GIVEN_PROGRESSIVE]
AFTER UPDATE
AS
SET NOCOUNT ON;
BEGIN
	
	DECLARE @V_IDApp INT,@V_AGREE_BRAND_ID VARCHAR(32) ,@V_AGREEMENT_NO VARCHAR(25),@V_DESCRIPTIONS VARCHAR(400),
	@V_DateCreated SMALLDATETIME,@V_CreatedBy VARCHAR(100),@V_BRAND_NAME VARCHAR(100),
	@V_PBQ3 DECIMAL(18,3),@V_PBQ4 DECIMAL(18,3),@V_PBS2 DECIMAL(18,3),@V_CPQ1 DECIMAL(18,3),
	@V_CPQ2 DECIMAL(18,3), @V_CPQ3 DECIMAL(18,3),@V_CPS1 DECIMAL(18,3),@V_PBY DECIMAL(18,3),

	@I_PBQ3 DECIMAL(18,3),@I_PBQ4 DECIMAL(18,3),@I_PBS2 DECIMAL(18,3),@I_CPQ1 DECIMAL(18,3),
	@I_CPQ2 DECIMAL(18,3), @I_CPQ3 DECIMAL(18,3),@I_CPS1 DECIMAL(18,3),@I_PBY DECIMAL(18,3),@V_ActionBy VARCHAR(100);

	SELECT @V_IDApp = IDApp, @V_AGREE_BRAND_ID = AGREE_BRAND_ID,@V_PBQ3 = PBQ3,@V_PBQ4 = PBQ4,@V_PBS2 = PBS2,@V_CPQ1 = CPQ1,
	@V_CPQ2 = CPQ2, @V_CPQ3 = CPQ3,@V_CPS1 = CPS1,@V_PBY = PBY, @V_DateCreated = CREATE_DATE, @V_CreatedBy = CREATE_BY FROM  DELETED;

	SELECT @I_PBQ3 = PBQ3,@I_PBQ4 = PBQ4,@I_PBS2 = PBS2,@I_CPQ1 = CPQ1,
	@I_CPQ2 = CPQ2, @I_CPQ3 = CPQ3,@I_CPS1 = CPS1,@I_PBY = PBY FROM  INSERTED;

	SET @V_AGREEMENT_NO = (SELECT TOP 1 AGREEMENT_NO FROM AGREE_BRAND_INCLUDE WHERE AGREE_BRAND_ID = @V_AGREE_BRAND_ID);
	SET @V_BRAND_NAME = (SELECT TOP 1 BR.BRAND_NAME FROM BRND_BRAND BR INNER JOIN AGREE_BRAND_INCLUDE ABI 
						ON ABI.BRAND_ID = BR.BRAND_ID WHERE ABI.AGREE_BRAND_ID = @V_AGREE_BRAND_ID);
	SET @V_ActionBy = CONVERT(VARCHAR(100), CONNECTIONPROPERTY('client_net_address'))
	SET @V_DESCRIPTIONS = 'Action = Update, Origin  BRAND_NAME ' + @V_BRAND_NAME + ',' + 
										' AGREMENT_NO  ' + @V_AGREEMENT_NO + ', {';
	IF @V_IDApp IS NULL
		RETURN;

	IF EXISTS(SELECT AGREE_BRAND_ID FROM INSERTED WHERE IDApp = @V_IDApp)
		BEGIN
			IF (@I_PBQ3 <> @V_PBQ3)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' PP Q3 ' + CONVERT(VARCHAR(100),@V_PBQ3) + ' ,'
			IF (@I_PBQ4 <> @V_PBQ4)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' PP Q4 ' + CONVERT(VARCHAR(100),@V_PBQ4) + ' ,'
			IF (@I_PBS2 <> @V_PBS2)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' PP S2 ' + CONVERT(VARCHAR(100),@V_PBS2) + ' ,'
			IF (@I_CPQ1 <> @V_CPQ1)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' CP Q1 ' + CONVERT(VARCHAR(100),@V_CPQ1) + ' ,'
			IF (@I_CPQ2 <> @V_CPQ2)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' CP Q2 ' + CONVERT(VARCHAR(100),@V_CPQ2) + ' ,'
			IF (@I_CPQ3 <> @V_CPQ3)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' CP Q3 ' + CONVERT(VARCHAR(100),@V_CPQ3) + ' ,'
			IF (@I_CPS1 <> @V_CPS1)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' CP S1 ' + CONVERT(VARCHAR(100),@V_CPS1) + ' ,'
			IF (@I_PBY <> @V_PBY)
			SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' PP Y ' + CONVERT(VARCHAR(100),@V_PBY) + ' ,'

			SET @V_DESCRIPTIONS = @V_DESCRIPTIONS + + '} Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy ' + @V_CreatedBy;
			INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
			VALUES('UPDATE','GIVEN_PROGRESSIVE','IDApp',CONVERT(VARCHAR(200),@V_IDApp),@V_DESCRIPTIONS,GETDATE(),@V_ActionBy);
		END
END
GO
 --=================================================================================================================


IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_DELETE_GIVEN_PROGRESSIVE')
BEGIN
DROP TRIGGER TR_DELETE_GIVEN_PROGRESSIVE  ;
END
GO

create trigger dbo.[TR_DELETE_GIVEN_PROGRESSIVE] 
on [dbo].[GIVEN_PROGRESSIVE]
AFTER DELETE
AS
SET NOCOUNT ON;
BEGIN
	DECLARE @V_IDApp INT,@V_AGREE_BRAND_ID VARCHAR(32) ,@V_AGREEMENT_NO VARCHAR(25),@V_DESCRIPTIONS VARCHAR(400),
	@V_DateCreated SMALLDATETIME,@V_CreatedBy VARCHAR(100),@V_BRAND_NAME VARCHAR(100),
	@V_PBQ3 DECIMAL(18,3),@V_PBQ4 DECIMAL(18,3),@V_PBS2 DECIMAL(18,3),@V_CPQ1 DECIMAL(18,3),
	@V_CPQ2 DECIMAL(18,3), @V_CPQ3 DECIMAL(18,3),@V_CPS1 DECIMAL(18,3),@V_PBY DECIMAL(18,3),@V_ActionBy VARCHAR(100);
	SELECT @V_IDApp = IDApp, @V_AGREE_BRAND_ID = AGREE_BRAND_ID,@V_PBQ3 = PBQ3,@V_PBQ4 = PBQ4,@V_PBS2 = PBS2,@V_CPQ1 = CPQ1,
	@V_CPQ2 = CPQ2, @V_CPQ3 = CPQ3,@V_CPS1 = CPS1,@V_PBY = PBY, @V_DateCreated = CREATE_DATE, @V_CreatedBy = CREATE_BY FROM  DELETED;
	SET @V_AGREEMENT_NO = (SELECT TOP 1 AGREEMENT_NO FROM AGREE_BRAND_INCLUDE WHERE AGREE_BRAND_ID = @V_AGREE_BRAND_ID);
	SET @V_BRAND_NAME = (SELECT TOP 1 BR.BRAND_NAME FROM BRND_BRAND BR INNER JOIN AGREE_BRAND_INCLUDE ABI 
						ON ABI.BRAND_ID = BR.BRAND_ID WHERE ABI.AGREE_BRAND_ID = @V_AGREE_BRAND_ID);
	SET @V_ActionBy = CONVERT(VARCHAR(100), CONNECTIONPROPERTY('client_net_address'))
	
	IF @V_IDApp IS NULL
		RETURN;

	IF NOT EXISTS(SELECT AGREE_BRAND_ID FROM INSERTED WHERE IDApp = @V_IDApp)
	BEGIN
		SET @V_DESCRIPTIONS = 'Action = Delete, ORIGIN VALUE  PP Q3 ' + CONVERT(VARCHAR(100),@V_PBQ3) + ' ,' + 
			' PP Q4 ' + CONVERT(VARCHAR(100),@V_PBQ4) + ' ,' + ' PP S2 ' + CONVERT(VARCHAR(100),@V_PBS2) + ' ,' +
			' CP Q1 ' + CONVERT(VARCHAR(100),@V_CPQ1) + ' ,' + ' CP Q2 ' + CONVERT(VARCHAR(100),@V_CPQ2) + ' ,' + 
			' CP Q3 ' + CONVERT(VARCHAR(100),@V_CPQ3) + ' ,' + ' CP S1 ' + CONVERT(VARCHAR(100),@V_CPS1) + ' ,' +
			' PP Y ' + CONVERT(VARCHAR(100),@V_PBY) + ' ,' +
			' Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy  ' + @V_CreatedBy;										
		INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
		VALUES('DELETE','GIVEN_PROGRESSIVE','IDApp',CONVERT(VARCHAR(200),@V_IDApp),@V_DESCRIPTIONS,GETDATE(),@V_ActionBy);
	END
END
GO
 --=================================================================================================================

--================ TRIGGER FOR ADJUSTMENT DPD PREVIOUS PERIODE ===============================
-- FOR UPDATE , DELETE, INSERT


IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_INSERT_ADJUSTMENT_DPD')
BEGIN
DROP TRIGGER TR_INSERT_ADJUSTMENT_DPD  ;
END
GO
CREATE TRIGGER [dbo].[TR_INSERT_ADJUSTMENT_DPD]
	ON [dbo].[ADJUSTMENT_DPD]
AFTER INSERT
AS 
SET NOCOUNT ON; 
BEGIN
DECLARE @V_IDApp INT ,@V_CreatedBy VARCHAR(100);
SELECT @V_IDApp = IDApp,@V_CreatedBy = CreatedBy FROM inserted;
IF @V_IDApp IS NULL
	RETURN;
IF NOT EXISTS(SELECT IDApp FROM deleted WHERE IDApp = @V_IDApp)--chek kalau ini adalah update triger
	BEGIN	
	INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
	VALUES('INSERT','ADJUSTMENT_DPD','IDApp',CONVERT(VARCHAR(200),@V_IDApp),'Inserted new Data',GETDATE(),@V_CreatedBy);
	END
END
GO
 --=================================================================================================================


IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_UPDATE_ADJUSTMENT_DPD')
BEGIN
DROP TRIGGER TR_UPDATE_ADJUSTMENT_DPD  ;
END
GO

create trigger dbo.[TR_UPDATE_ADJUSTMENT_DPD] 
on [dbo].[ADJUSTMENT_DPD]
AFTER UPDATE
AS
SET NOCOUNT ON;
BEGIN
	
	DECLARE @V_IDApp INT,@V_NameApp VARCHAR(100),@V_DESCRIPTIONS VARCHAR(400),
	@V_DateCreated SMALLDATETIME,@V_CreatedBy VARCHAR(100),@V_BRANDPACK_ID VARCHAR(14),@V_BRANDPACK_NAME VARCHAR(100),
	@V_DISTRIBUTOR_ID VARCHAR(10),@V_DISTRIBUTOR_NAME VARCHAR(100),
	@V_QTY DECIMAL(18,3), @V_RELEASE_QTY DECIMAL(18,3),@V_LEFT_QTY DECIMAL(18,3),
	@V_ApprovedBy VARCHAR(100),@V_ApprovedDate SMALLDATETIME,
	@I_ApprovedBy VARCHAR(100),@I_ApprovedDate SMALLDATETIME,
	@I_NameApp VARCHAR(100),
	@I_QTY DECIMAL(18,3), @I_RELEASE_QTY DECIMAL(18,3),@I_LEFT_QTY DECIMAL(18,3),@V_ActionBy VARCHAR(100);

	SELECT @V_IDApp = IDApp,@V_NameApp = NameApp,@V_QTY = QTY,@V_RELEASE_QTY = RELEASE_QTY,@V_LEFT_QTY = LEFT_QTY,@V_BRANDPACK_ID = BRANDPACK_ID,
	@V_DISTRIBUTOR_ID = DISTRIBUTOR_ID,@V_DateCreated = CreatedDate, @V_CreatedBy = CreatedBy FROM  DELETED;

	SELECT @I_NameApp = NameApp,@I_QTY = QTY,@I_RELEASE_QTY = RELEASE_QTY,@I_LEFT_QTY = LEFT_QTY FROM  INSERTED;

	--INITIALISAS BILA NULL
	IF @I_NameApp IS NULL
		SET @I_NameApp = ''
	IF @V_NameApp IS NULL 
		SET @V_NameApp = ''
	IF @I_QTY IS NULL 
		SET @I_QTY = 0
	IF @V_QTY IS NULL
		SET @V_QTY = 0
	IF @I_RELEASE_QTY IS NULL 
		SET @I_RELEASE_QTY = 0
	IF @V_RELEASE_QTY IS NULL
		SET @V_RELEASE_QTY = 0
	IF @I_LEFT_QTY IS NULL
		SET @I_LEFT_QTY = 0
	IF @V_LEFT_QTY IS NULL
		SET @V_LEFT_QTY = 0
	IF @I_ApprovedBy IS NULL
		SET @I_ApprovedBy = ''
	IF @V_ApprovedBy IS NULL
		SET @V_ApprovedBy = ''
	IF @I_ApprovedDate IS NULL
		SET @I_ApprovedDate = CONVERT(VARCHAR(100),(GETDATE()-1),101)
	IF @V_ApprovedDate IS NULL
		SET @V_ApprovedDate = CONVERT(VARCHAR(100),(GETDATE()-1),101)

	SET @V_BRANDPACK_NAME = (SELECT TOP 1 BRANDPACK_NAME FROM BRND_BRANDPACK WHERE BRANDPACK_ID = @V_BRANDPACK_ID);
	SET @V_DISTRIBUTOR_NAME = (SELECT TOP 1 DISTRIBUTOR_NAME FROM DIST_DISTRIBUTOR WHERE DISTRIBUTOR_ID = @V_DISTRIBUTOR_ID);
	SET @V_ActionBy = CONVERT(VARCHAR(100), CONNECTIONPROPERTY('client_net_address'))
	SET @V_DESCRIPTIONS = 'Action = Update, Origin  BRANDPACK_NAME ' + @V_BRANDPACK_NAME + ',' + 
										' DISTRIBUTOR_NAME  ' + @V_DISTRIBUTOR_NAME + ', {';
	IF @V_IDApp IS NULL
		RETURN;
	IF EXISTS(SELECT IDApp FROM INSERTED WHERE IDApp = @V_IDApp)
		BEGIN
			IF (@I_NameApp <> @V_NameApp)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' ADJUSTMENT_NAME , ' + @V_NameApp
			IF (@I_QTY <> @V_QTY)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' ADJUSMENT_QTY ' + CONVERT(VARCHAR(100),ISNULL(@V_QTY,0)) + ' ,'
			IF (@I_RELEASE_QTY <> @V_RELEASE_QTY)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' RELEASE_QTY ' + CONVERT(VARCHAR(100),ISNULL(@V_RELEASE_QTY,0)) + ' ,'
			IF (@I_LEFT_QTY <> @V_LEFT_QTY)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' LEFT_QTY ' + CONVERT(VARCHAR(100),ISNULL(@V_LEFT_QTY,0)) 
			IF (@I_ApprovedBy <> @V_ApprovedBy)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' Approved By ' + @V_ApprovedBy
			IF (@I_ApprovedDate <> @V_ApprovedDate)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' Approved Date ' + CONVERT(VARCHAR(100),@V_ApprovedDate,101) + ', '
			SET @V_DESCRIPTIONS = @V_DESCRIPTIONS + '}, Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy ' + @V_CreatedBy;
			INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
			VALUES('UPDATE','ADJUSTMENT_DPD','IDApp',CONVERT(VARCHAR(200),@V_IDApp),@V_DESCRIPTIONS,GETDATE(),@V_ActionBy);
		END
END
GO
 --=================================================================================================================


IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_DELETE_ADJUSTMENT_DPD')
BEGIN
DROP TRIGGER TR_DELETE_ADJUSTMENT_DPD  ;
END
GO

create trigger dbo.[TR_DELETE_ADJUSTMENT_DPD] 
on [dbo].[ADJUSTMENT_DPD]
AFTER DELETE
AS
SET NOCOUNT ON;
BEGIN
		DECLARE @V_IDApp INT,@V_NameApp VARCHAR(100),@V_DESCRIPTIONS VARCHAR(400),
	@V_DateCreated SMALLDATETIME,@V_CreatedBy VARCHAR(100),@V_BRANDPACK_ID VARCHAR(14),@V_BRANDPACK_NAME VARCHAR(100),
	@V_DISTRIBUTOR_ID VARCHAR(10),@V_DISTRIBUTOR_NAME VARCHAR(100),@V_START_DATE SMALLDATETIME,@V_END_DATE SMALLDATETIME,
	@V_QTY DECIMAL(18,3), @V_RELEASE_QTY DECIMAL(18,3),@V_LEFT_QTY DECIMAL(18,3),@V_ActionBy VARCHAR(100);
	SELECT @V_IDApp = IDApp,@V_NameApp = NameApp,@V_QTY = QTY,@V_RELEASE_QTY = RELEASE_QTY,@V_LEFT_QTY = LEFT_QTY,@V_BRANDPACK_ID = BRANDPACK_ID,
	@V_DISTRIBUTOR_ID = DISTRIBUTOR_ID, @V_START_DATE = START_DATE,@V_END_DATE = END_DATE,@V_DateCreated = CreatedDate, @V_CreatedBy = CreatedBy FROM  DELETED;
	SET @V_BRANDPACK_NAME = (SELECT TOP 1 BRANDPACK_NAME FROM BRND_BRANDPACK WHERE BRANDPACK_ID = @V_BRANDPACK_ID);
	SET @V_DISTRIBUTOR_NAME = (SELECT TOP 1 DISTRIBUTOR_NAME FROM DIST_DISTRIBUTOR WHERE DISTRIBUTOR_ID = @V_DISTRIBUTOR_ID);
	SET @V_ActionBy = CONVERT(VARCHAR(100), CONNECTIONPROPERTY('client_net_address'))
		SET @V_DESCRIPTIONS = 'Action = Delete, Origin  BRANDPACK_NAME ' + @V_BRANDPACK_NAME + ',' + 
										' DISTRIBUTOR_NAME  ' + @V_DISTRIBUTOR_NAME + ',';
	IF @V_IDApp IS NULL
		RETURN;
	IF NOT EXISTS(SELECT IDApp FROM INSERTED WHERE IDApp = @V_IDApp)
	BEGIN
		SET @V_DESCRIPTIONS = @V_DESCRIPTIONS +  ' ADJUSMENT_NAME ' + @V_NameApp + ',' +
		' START_PERIODE = ' + CONVERT(VARCHAR(100),@V_START_DATE,101) + ', END_PERIODE = ' +
		CONVERT(VARCHAR(100),@V_END_DATE,101) + ' , ADJUSMENT_QTY ' + CONVERT(VARCHAR(100),ISNULL(@V_QTY,0)) + ' ,' + 
			' RELEASE_QTY ' + CONVERT(VARCHAR(100),ISNULL(@V_RELEASE_QTY,0)) + ' ,' + ' LEFT_QTY ' + CONVERT(VARCHAR(100),ISNULL(@V_LEFT_QTY,0)) + ' ,' +
			' Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy  ' + @V_CreatedBy;										
		INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
		VALUES('DELETE','ADJUSTMENT_DPD','IDApp',CONVERT(VARCHAR(200),@V_IDApp),@V_DESCRIPTIONS,GETDATE(),@V_ActionBy);
	END
END
GO
 --=================================================================================================================

----------============================= TRIGGER SALES PROGRAM ============================================================
IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_INSERT_SALES_PROGRAM')
BEGIN
DROP TRIGGER TR_INSERT_SALES_PROGRAM  ;
END
GO
CREATE TRIGGER [dbo].[TR_INSERT_SALES_PROGRAM]
	ON [dbo].[MRKT_BRANDPACK_DISTRIBUTOR]
AFTER INSERT
AS 
SET NOCOUNT ON; 
BEGIN
DECLARE @V_PROGBRANDPACK_DIST_ID VARCHAR(40) ,@V_CreatedBy VARCHAR(100);
SELECT  @V_PROGBRANDPACK_DIST_ID = PROG_BRANDPACK_DIST_ID,@V_CreatedBy = CREATE_BY FROM inserted;
IF  @V_PROGBRANDPACK_DIST_ID IS NULL
	RETURN;
IF NOT EXISTS(SELECT  PROG_BRANDPACK_DIST_ID FROM deleted WHERE  PROG_BRANDPACK_DIST_ID =  @V_PROGBRANDPACK_DIST_ID)--chek kalau ini adalah update triger
	BEGIN	
	INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
	VALUES('INSERT','MRKT_BRANDPACK_DISTRIBUTOR','PROG_BRANDPACK_DIST_ID',CONVERT(VARCHAR(200), @V_PROGBRANDPACK_DIST_ID),'Inserted new Data',GETDATE(),@V_CreatedBy);
	END
END
GO
 --=================================================================================================================

-------------SALES PROGRAM--------------------
IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_UPDATE_SALES_PROGRAM')
BEGIN
DROP TRIGGER TR_UPDATE_SALES_PROGRAM  ;
END
GO

create trigger dbo.[TR_UPDATE_SALES_PROGRAM] 
on [dbo].[MRKT_BRANDPACK_DISTRIBUTOR]
AFTER UPDATE
AS
SET NOCOUNT ON;
SET ANSI_NULLS OFF;
BEGIN
	
	--DELETED
	DECLARE @V_PROGBRANDPACK_DIST_ID VARCHAR(40),@V_START_DATE SMALLDATETIME,@V_END_DATE SMALLDATETIME,
	@V_DateCreated SMALLDATETIME,@V_CreatedBy VARCHAR(100),@V_PROG_BRANDPACK_ID VARCHAR(100),@V_BRANDPACK_ID VARCHAR(14),@V_BRANDPACK_NAME VARCHAR(100),
	@V_DISTRIBUTOR_ID VARCHAR(10),@V_DISTRIBUTOR_NAME VARCHAR(100),
	@V_ISPKPP BIT,@V_GIVEN_PKPP DECIMAL(16,3), @V_TARGET_PKPP DECIMAL(18,3),@V_ISCP BIT,@V_GIVEN_CP DECIMAL(16,3),
	@V_TARGET_CP DECIMAL(18,3),@V_ISSCPD BIT,@V_ISCPMRT BIT,@V_GIVEN_CPMRT DECIMAL(16,3),@V_TARGET_CPMRT DECIMAL(18,3),
	@V_SHIP_TO_ID VARCHAR(25),@V_IS_T_TM_DIST BIT,@V_ISCPR BIT,@V_GIVEN_CPR DECIMAL(16,3),@V_TARGET_CPR DECIMAL(18,3),
	@V_ISDK BIT,@V_GIVEN_DK DECIMAL(16,3),@V_TARGET_DK DECIMAL(18,3),@V_ActionBy VARCHAR(100),@V_DESCRIPTIONS VARCHAR(600),
	@V_ApprovedBy VARCHAR(150),@V_ApprovedDate SMALLDATETIME,

	--INSERTED 
	@I_ISPKPP BIT,@I_ISCP BIT,@I_ISSCPD BIT,@I_ISCPMRT BIT,	@I_SHIP_TO_ID VARCHAR(25),@I_IS_T_TM_DIST BIT,@I_ISCPR BIT,
	@I_ISDK BIT,@I_START_DATE SMALLDATETIME,@I_END_DATE SMALLDATETIME,@I_ApprovedBy VARCHAR(150),@I_ApprovedDate SMALLDATETIME;


	
	--FILL VALUE
	SELECT @V_PROGBRANDPACK_DIST_ID = PROG_BRANDPACK_DIST_ID,@V_PROG_BRANDPACK_ID = PROG_BRANDPACK_ID,@V_START_DATE = START_DATE,@V_END_DATE = END_DATE,@V_ISPKPP = ISPKPP,
	@V_GIVEN_PKPP = GIVEN_PKPP,@V_TARGET_PKPP = TARGET_PKPP,@V_ISCP = ISCP,@V_GIVEN_CP = GIVEN_CP,
	@V_TARGET_CP = TARGET_CP,@V_ISSCPD = ISSCPD,@V_ISCPMRT = ISCPMRT,@V_TARGET_CPMRT = TARGET_CPMRT,
	@V_SHIP_TO_ID = SHIP_TO_ID,@V_IS_T_TM_DIST = IS_T_TM_DIST,@V_ISCPR = ISCPR,@V_GIVEN_CPR = GIVEN_CPR,@V_TARGET_CPR = TARGET_CPR,
	@V_ISDK = ISDK,@V_GIVEN_DK = GIVEN_DK,@V_TARGET_DK = TARGET_DK,
	@V_DISTRIBUTOR_ID = DISTRIBUTOR_ID,@V_DateCreated = CREATE_DATE, @V_CreatedBy = CREATE_BY,@V_ApprovedBy = ApprovedBy,@V_ApprovedDate = ApprovedDate FROM DELETED;

	SELECT @I_ISPKPP = ISPKPP,@I_ISSCPD = ISSCPD,@I_ISCPMRT = ISCPMRT,@I_SHIP_TO_ID = SHIP_TO_ID,@I_IS_T_TM_DIST = IS_T_TM_DIST,
	@I_ISCPR = ISCPR, @I_ISDK = ISDK,@I_ApprovedBy = ApprovedBy,@I_ApprovedDate = ApprovedDate FROM INSERTED;

	--INITIALISASI bila null
	SET @V_START_DATE = ISNULL(@V_START_DATE,CONVERT(VARCHAR(100),GETDATE(),101));
	SET @I_START_DATE = ISNULL(@I_START_DATE,CONVERT(VARCHAR(100),GETDATE(),101));
	SET @V_END_DATE = ISNULL(@V_END_DATE,CONVERT(VARCHAR(100),GETDATE(),101));
	SET @I_END_DATE = ISNULL(@I_END_DATE,CONVERT(VARCHAR(100),GETDATE(),101));
	SET @I_SHIP_TO_ID  = ISNULL(@I_SHIP_TO_ID,''); 
	SET @V_SHIP_TO_ID = ISNULL(@V_SHIP_TO_ID,'');
	SET @I_IS_T_TM_DIST = ISNULL(@I_IS_T_TM_DIST,'');
	SET @V_IS_T_TM_DIST = ISNULL(@V_IS_T_TM_DIST,'');
	SET @I_ApprovedBy = ISNULL(@I_ApprovedBy,'');
	SET @V_ApprovedBy  = ISNULL(@V_ApprovedBy,'');
	SET @I_ApprovedDate = ISNULL(@I_ApprovedDate,CONVERT(VARCHAR(100),(GETDATE()-1),101));
	SET @V_ApprovedDate = ISNULL(@V_ApprovedDate,CONVERT(VARCHAR(100),(GETDATE()-1),101));

	SET @V_BRANDPACK_ID = (SELECT TOP 1 BRANDPACK_ID FROM MRKT_BRANDPACK WHERE PROG_BRANDPACK_ID = @V_PROG_BRANDPACK_ID);	
	SET @V_BRANDPACK_NAME = (SELECT TOP 1 BRANDPACK_NAME FROM BRND_BRANDPACK WHERE BRANDPACK_ID = @V_BRANDPACK_ID);
	SET @V_DISTRIBUTOR_NAME = (SELECT TOP 1 DISTRIBUTOR_NAME FROM DIST_DISTRIBUTOR WHERE DISTRIBUTOR_ID = @V_DISTRIBUTOR_ID);
	SET @V_ActionBy = CONVERT(VARCHAR(100), CONNECTIONPROPERTY('client_net_address'))
	SET @V_DESCRIPTIONS = 'Action = Update, Origin  BRANDPACK_NAME ' + @V_BRANDPACK_NAME + ',' + 
										' DISTRIBUTOR_NAME  ' + @V_DISTRIBUTOR_NAME + ', {';
	IF @V_PROGBRANDPACK_DIST_ID IS NULL
		RETURN;
	IF EXISTS(SELECT PROG_BRANDPACK_DIST_ID FROM DELETED WHERE PROG_BRANDPACK_DIST_ID = @V_PROGBRANDPACK_DIST_ID)
		BEGIN
			IF @I_START_DATE != @V_START_DATE
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' START_DATE ' + CONVERT(VARCHAR(100),@V_START_DATE,101) + ', ' 
			IF @I_END_DATE <> @V_END_DATE
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' END_DATE ' + CONVERT(VARCHAR(100),@V_END_DATE,101) + ', '

			IF (@I_ISPKPP <> @V_ISPKPP) OR(@V_ISPKPP = 1)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' PKPP PROGRAM , ' +
										'GIVEN PKPP ' + CONVERT(VARCHAR(100),ISNULL(@V_GIVEN_PKPP,0)) + ', ' +
										'TARGET PKPP ' + CONVERT(VARCHAR(100),ISNULL(@V_TARGET_PKPP,0))			
			IF (@I_ISCP <> @V_ISCP) OR (@V_ISCP = 1) 
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' CPD PROGRAM, GIVEN CPD ' + CONVERT(VARCHAR(100),ISNULL(@V_GIVEN_CP,0)) + ', ' +
										'TARGET_CPD ' + CONVERT(VARCHAR(100),ISNULL(@V_TARGET_CP,0))		
			IF (@I_ISSCPD <> @V_ISSCPD) OR (@V_ISSCPD = 1)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TYPE OF CPD = CPDK '
			IF (@I_ISCPMRT <> @V_ISCPMRT) OR (@V_ISCPMRT = 1)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' CPRMT PROGRAM, GIVEN_CPRMT ' + CONVERT(VARCHAR(100),ISNULL(@V_GIVEN_CPMRT,0)) + ', ' +
										'TARGET_CPRMT ' + CONVERT(VARCHAR(100),ISNULL(@V_TARGET_CPMRT,0))		
			IF (@I_ISCPR <> @V_ISCPR) OR(@V_ISCPR = 1)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' CPRD PROGRAM, GIVEN CPRD ' + CONVERT(VARCHAR(100),ISNULL(@V_GIVEN_CPR,0)) + ', ' +
										'TARGET_CPR ' + CONVERT(VARCHAR(100),ISNULL(@V_TARGET_CPR,0))
			IF (@I_ISDK <> @V_ISDK) OR (@V_ISDK = 1)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' DK PROGRAM, GIVEN DK ' + CONVERT(VARCHAR(100),ISNULL(@V_GIVEN_DK,0)) + ', ' +
										'TARGET_DK ' + CONVERT(VARCHAR(100),ISNULL(@V_TARGET_DK,0))
			IF (@I_SHIP_TO_ID <> @V_SHIP_TO_ID) 
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' SHIP_TO_ID ' + @V_SHIP_TO_ID 
			IF (@I_IS_T_TM_DIST <> @V_IS_T_TM_DIST)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TARGET_TM_DIST ' + CONVERT(VARCHAR(20),ISNULL(@V_IS_T_TM_DIST,0))
			IF (@I_ApprovedBy <> @V_ApprovedBy)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' Approved By ' + @V_ApprovedBy
			IF (@I_ApprovedDate <> @V_ApprovedDate)
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + '}, Approved Date ' + CONVERT(VARCHAR(100),@V_ApprovedDate,101) + ', '
			SET @V_DESCRIPTIONS = @V_DESCRIPTIONS + ' Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy ' + @V_CreatedBy;
			INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
			VALUES('UPDATE','MRKT_BRANDPACK_DISTRIBUTOR','PROG_BRANDPACK_DIST_ID',CONVERT(VARCHAR(200),@V_PROGBRANDPACK_DIST_ID),
					@V_DESCRIPTIONS,GETDATE(),@V_ActionBy);
		END
END
GO
 --=================================================================================================================

--DELETE FROM TR_AUDIT_LOG WHERE TABLE_NAME = 'MRKT_BRANDPACK_DISTRIBUTOR'
IF EXISTS(SELECT * FROM sys.triggers WHERE type = 'TR' AND name = 'TR_DELETE_SALES_PROGRAM')
BEGIN
DROP TRIGGER TR_DELETE_SALES_PROGRAM  ;
END
GO

create trigger dbo.[TR_DELETE_SALES_PROGRAM] 
on [dbo].[MRKT_BRANDPACK_DISTRIBUTOR]
AFTER DELETE
AS
SET NOCOUNT ON;
BEGIN
	
	--DELETED
	DECLARE @V_PROGBRANDPACK_DIST_ID VARCHAR(40),@V_START_DATE SMALLDATETIME,@V_END_DATE SMALLDATETIME,
	@V_DateCreated SMALLDATETIME,@V_CreatedBy VARCHAR(100),@V_PROG_BRANDPACK_ID VARCHAR(100),@V_BRANDPACK_ID VARCHAR(14),@V_BRANDPACK_NAME VARCHAR(100),
	@V_DISTRIBUTOR_ID VARCHAR(10),@V_DISTRIBUTOR_NAME VARCHAR(100),
	@V_ISPKPP BIT,@V_GIVEN_PKPP DECIMAL(16,3), @V_TARGET_PKPP DECIMAL(18,3),@V_ISCP BIT,@V_GIVEN_CP DECIMAL(16,3),
	@V_TARGET_CP DECIMAL(18,3),@V_ISSCPD BIT,@V_ISCPMRT BIT,@V_GIVEN_CPMRT DECIMAL(16,3),@V_TARGET_CPMRT DECIMAL(18,3),
	@V_SHIP_TO_ID VARCHAR(25),@V_IS_T_TM_DIST BIT,@V_ISCPR BIT,@V_GIVEN_CPR DECIMAL(16,3),@V_TARGET_CPR DECIMAL(18,3),
	@V_ISDK BIT,@V_GIVEN_DK DECIMAL(16,3),@V_TARGET_DK DECIMAL(18,3),@V_ActionBy VARCHAR(100),@V_DESCRIPTIONS VARCHAR(600);


	SELECT @V_PROGBRANDPACK_DIST_ID = PROG_BRANDPACK_DIST_ID,@V_PROG_BRANDPACK_ID = PROG_BRANDPACK_ID,@V_START_DATE = START_DATE,@V_END_DATE = END_DATE,@V_ISPKPP = ISPKPP,
	@V_GIVEN_PKPP = GIVEN_PKPP,@V_TARGET_PKPP = TARGET_PKPP,@V_ISCP = ISCP,@V_GIVEN_CP = GIVEN_CP,
	@V_TARGET_CP = TARGET_CP,@V_ISSCPD = ISSCPD,@V_ISCPMRT = ISCPMRT,@V_TARGET_CPMRT = TARGET_CPMRT,
	@V_SHIP_TO_ID = SHIP_TO_ID,@V_IS_T_TM_DIST = IS_T_TM_DIST,@V_ISCPR = ISCPR,@V_GIVEN_CPR = GIVEN_CPR,@V_TARGET_CPR = TARGET_CPR,
	@V_ISDK = ISDK,@V_GIVEN_DK = GIVEN_DK,@V_TARGET_DK = TARGET_DK,
	@V_DISTRIBUTOR_ID = DISTRIBUTOR_ID,@V_DateCreated = CREATE_DATE, @V_CreatedBy = CREATE_BY FROM DELETED;
	
	 
	SET @V_BRANDPACK_ID = (SELECT TOP 1 BRANDPACK_ID FROM MRKT_BRANDPACK WHERE PROG_BRANDPACK_ID = @V_PROG_BRANDPACK_ID);	
	SET @V_BRANDPACK_NAME = (SELECT TOP 1 BRANDPACK_NAME FROM BRND_BRANDPACK WHERE BRANDPACK_ID = @V_BRANDPACK_ID);
	SET @V_DISTRIBUTOR_NAME = (SELECT TOP 1 DISTRIBUTOR_NAME FROM DIST_DISTRIBUTOR WHERE DISTRIBUTOR_ID = @V_DISTRIBUTOR_ID);
	SET @V_ActionBy = CONVERT(VARCHAR(100), CONNECTIONPROPERTY('client_net_address'))
	SET @V_DESCRIPTIONS = 'Action = DELETE, Origin  BRANDPACK_NAME ' + @V_BRANDPACK_NAME + ',' + 
										' DISTRIBUTOR_NAME  ' + @V_DISTRIBUTOR_NAME + ',';
	IF @V_PROGBRANDPACK_DIST_ID IS NULL
		RETURN;
	IF EXISTS(SELECT PROG_BRANDPACK_DIST_ID FROM DELETED WHERE PROG_BRANDPACK_DIST_ID = @V_PROGBRANDPACK_DIST_ID)
		BEGIN			
			SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' START_DATE ' + CONVERT(VARCHAR(100),@V_START_DATE,101) + ', ' +
									  ' END_DATE ' + CONVERT(VARCHAR(100),@V_END_DATE,101) + ', '
			IF @V_ISPKPP = 1
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' PKPP PROGRAM , ' +
										'GIVEN PKPP ' + CONVERT(VARCHAR(100),ISNULL(@V_GIVEN_PKPP,0)) + ', ' +
										'TARGET PKPP ' + CONVERT(VARCHAR(100),ISNULL(@V_TARGET_PKPP,0))			
			IF @V_ISCP = 1
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' CPD PROGRAM, GIVEN CPD ' + CONVERT(VARCHAR(100),ISNULL(@V_GIVEN_CP,0)) + ', ' +
										'TARGET_CPD ' + CONVERT(VARCHAR(100),ISNULL(@V_TARGET_CP,0))		
			IF @V_ISSCPD = 1
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' TYPE OF CPD = CPDK '
			IF @V_ISCPMRT = 1
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' CPRMT PROGRAM, GIVEN_CPRMT ' + CONVERT(VARCHAR(100),ISNULL(@V_GIVEN_CPMRT,0)) + ', ' +
										'TARGET_CPRMT ' + CONVERT(VARCHAR(100),ISNULL(@V_TARGET_CPMRT,0))		
			IF @V_ISCPR = 1
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' CPRD PROGRAM, GIVEN CPRD ' + CONVERT(VARCHAR(100),ISNULL(@V_GIVEN_CPR,0)) + ', ' +
										'TARGET_CPR ' + CONVERT(VARCHAR(100),ISNULL(@V_TARGET_CPR,0))
			IF @V_ISDK = 1
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' DK PROGRAM, GIVEN DK ' + CONVERT(VARCHAR(100),ISNULL(@V_GIVEN_DK,0)) + ', ' +
										'TARGET_DK ' + CONVERT(VARCHAR(100),ISNULL(@V_TARGET_DK,0))
			
				SET @V_DESCRIPTIONS  = @V_DESCRIPTIONS + ' SHIP_TO_ID ' + @V_SHIP_TO_ID +		
				 ' TARGET_TM_DIST ' + CONVERT(VARCHAR(20),ISNULL(@V_IS_T_TM_DIST,0));
				 
			SET @V_DESCRIPTIONS = @V_DESCRIPTIONS + ' Date Created = ' + CONVERT(VARCHAR(100),@V_DateCreated,101) + ' CreatedBy ' + @V_CreatedBy;
			INSERT INTO TR_AUDIT_LOG(ACTION_NAME,TABLE_NAME,COLUMN_ID,VALUE_ID,DESCRIPTIONS,ACTION_DATE,ACTION_BY)
			VALUES('DELETE','MRKT_BRANDPACK_DISTRIBUTOR','PROG_BRANDPACK_DIST_ID',CONVERT(VARCHAR(200),@V_PROGBRANDPACK_DIST_ID),
					@V_DESCRIPTIONS,GETDATE(),@V_ActionBy);
		END
END
GO
 --=================================================================================================================